using DevExpress.Mvvm.Native;
using System;
using System.Linq.Expressions;
using System.Windows.Input;

namespace DevExpress.Mvvm.DataAnnotations {
    public abstract class CommandMetadataBuilderBase<T, TBuilder> :
        MemberMetadataBuilderBase<T, TBuilder, ClassMetadataBuilder<T>> 
        where TBuilder : CommandMetadataBuilderBase<T, TBuilder> {
        internal CommandMetadataBuilderBase(MemberMetadataStorage storage, ClassMetadataBuilder<T> parent)
            : base(storage, parent) {
        }
        public MetadataBuilder<T> EndCommand() {
            return (MetadataBuilder<T>)parent;
        }

#if !FREE
        public TBuilder Parameter<TParameter>(Expression<Func<T, TParameter>> propertyExpression) {
            return AddOrReplaceAttribute(new CommandParameterAttribute(ClassMetadataBuilder<T>.GetPropertyName(propertyExpression)));
        }

        public TBuilder ImageName(string imageName) { return ImageNameCore(imageName); }
        public TBuilder ImageUri(string imageUri) { return ImageUriCore(imageUri); }
        public TBuilder ImageUriLarge(string uri) { return ImageUriLargeCore(uri); }
        public TBuilder ImageUriSmall(string uri) { return ImageUriSmallCore(uri); }

        public TBuilder DisplayName(string name) { return DisplayNameCore(name); }
        public TBuilder DisplayShortName(string shortName) { return DisplayShortNameCore(shortName); }
        public TBuilder Description(string description) { return DescriptionCore(description); }
        public TBuilder NotAutoGenerated() { return NotAutoGeneratedCore(); }
        public TBuilder AutoGenerated() { return AutoGeneratedCore(); }
        public TBuilder DoNotScaffold() { return DoNotScaffoldCore(); }
        public TBuilder DoNotScaffoldDetailCollection() { return DoNotScaffoldDetailCollectionCore(); }
        public TBuilder LocatedAt(int position, PropertyLocation propertyLocation = PropertyLocation.BeforePropertiesWithoutSpecifiedLocation) { return LocatedAtCore(position, propertyLocation); }
#endif
    }
}
